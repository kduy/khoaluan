! -----------------------------------------------------------------------------------
! T-SQL Grammar
! -----------------------------------------------------------------------------------
! In exception to the overall bsn ModuleStore project, this grammar file is licensed
! under LGPL and MIT license - http://www.opensource.org/licenses/mit-license.php

"Name"         = 'T-SQL 2008 (strict subset)'
"Version"      = '2008'
"About"        = 'Parser for T-SQL subset to be supported by ModuleStore.'
               | 'This subset excludes ambiguous and deprecated SQL as well as some features not used by ModuleStore.'
"Author"       = 'Arsène von Wyss'

"Character Mapping" = 'Unicode'

"Start Symbol" = <StatementList>

! CLR UDTs are missing, but may be implemented later

! =============================================================================
! Comments
! =============================================================================

Comment Start = '/*'
Comment End   = '*/'
Comment Line  = '--'

! =============================================================================
! Terminals
! =============================================================================

{Any Ch}                        = {All Valid} - {Control Codes}
{String Ch}                     = {Any Ch} - [''] + {Whitespace}
{Id Ch Standard}                = {Alphanumeric} + [_]
{Id Ch Delimited Bracket}       = {Any Ch} - ['['']']
{Id Ch Delimited Bracket Start} = {Id Ch Delimited Bracket} - [#]
{Id Ch Delimited Quote}         = {Any Ch} - ["#]
{Id Ch Delimited Quote Start}   = {Id Ch Delimited Quote} - [#]
{Hex Ch}                        = [0123456789ABCDEF]
{Nonspace Ch}                   = {Any Ch} - {Whitespace}

StringLiteral  = N?(''{String Ch}*'')+
IntegerLiteral = {Digit}+
RealLiteral    = {Digit}+'.'{Digit}+|{Digit}+('.'{Digit}+)?[eE][+-]?{Digit}+
HexLiteral     = 0x{Hex Ch}+

! We use a simplified name convention, which does not allow user/schema, database or server to be specified
Id           = {Letter}{Id Ch Standard}*
QuotedId     = '['{Id Ch Delimited Bracket Start}{Id Ch Delimited Bracket}*']' | '"'{Id Ch Delimited Quote Start}{Id Ch Delimited Quote}*'"'
LocalId      = '@'{Letter}{Id Ch Standard}*
SystemVarId  = '@@'{Letter}{Id Ch Standard}*
SystemFuncId = '::'{Letter}{Id Ch Standard}*
TempTableId  = '#'{Letter}{Id Ch Standard}* | '[#'{Id Ch Delimited Bracket}+']' | '"#'{Id Ch Delimited Quote}+'"'

! The reserved keywords as per MSDN: http://msdn.microsoft.com/en-us/library/ms189822.aspx
! By specifying them explicitly here, we should not see those in the log as implicit when generating the grammar tables, and the unsed ones are still reserved keywords
ADD = ADD
ALL = ALL
ALTER = ALTER
AND = AND
ANY = ANY
AS = AS
ASC = ASC
AUTHORIZATION = AUTHORIZATION
BACKUP = BACKUP
BEGIN = BEGIN
BETWEEN = BETWEEN
BREAK = BREAK
BROWSE = BROWSE
BULK = BULK
BY = BY
CASCADE = CASCADE
CASE = CASE
CHECK = CHECK
CHECKPOINT = CHECKPOINT
CLOSE = CLOSE
CLUSTERED = CLUSTERED
COALESCE = COALESCE
COLLATE = COLLATE
COLUMN = COLUMN
COMMIT = COMMIT
COMPUTE = COMPUTE
CONSTRAINT = CONSTRAINT
CONTAINS = CONTAINS
CONTAINSTABLE = CONTAINSTABLE
CONTINUE = CONTINUE
CONVERT = CONVERT
CREATE = CREATE
CROSS = CROSS
CURRENT = CURRENT
CURRENT_DATE = CURRENT_DATE
CURRENT_TIME = CURRENT_TIME
CURRENT_TIMESTAMP = CURRENT_TIMESTAMP
CURRENT_USER = CURRENT_USER
CURSOR = CURSOR
DATABASE = DATABASE
DBCC = DBCC
DEALLOCATE = DEALLOCATE
DECLARE = DECLARE
DEFAULT = DEFAULT
DELETE = DELETE
DENY = DENY
DESC = DESC
DISK = DISK
DISTINCT = DISTINCT
DISTRIBUTED = DISTRIBUTED
DOUBLE = DOUBLE
DROP = DROP
DUMMY = DUMMY
DUMP = DUMP
ELSE = ELSE
END = END
ERRLVL = ERRLVL
ESCAPE = ESCAPE
EXCEPT = EXCEPT
! EXEC = EXEC
EXECUTE = EXEC(UTE)?
EXISTS = EXISTS
EXIT = EXIT
FETCH = FETCH
FILE = FILE
FILLFACTOR = FILLFACTOR
FOR = FOR
FOREIGN = FOREIGN
FREETEXT = FREETEXT
FREETEXTTABLE = FREETEXTTABLE
FROM = FROM
FULL = FULL
FUNCTION = FUNCTION
GOTO = GOTO
GRANT = GRANT
GROUP = GROUP
HAVING = HAVING
HOLDLOCK = HOLDLOCK
IDENTITY = IDENTITY
IDENTITY_INSERT = IDENTITY_INSERT
IDENTITYCOL = IDENTITYCOL
IF = IF
IN = IN
INDEX = INDEX
INNER = INNER
INSERT = INSERT
INTERSECT = INTERSECT
INTO = INTO
IS = IS
JOIN = JOIN
KEY = KEY
KILL = KILL
LEFT = LEFT
LIKE = LIKE
LINENO = LINENO
LOAD = LOAD
NATIONAL = NATIONAL
NOCHECK = NOCHECK
NONCLUSTERED = NONCLUSTERED
NOT = NOT
NULL = NULL
NULLIF = NULLIF
OBJECT_ID = OBJECT_ID
OF = OF
OFF = OFF
OFFSETS = OFFSETS
ON = ON
OPEN = OPEN
OPENDATASOURCE = OPENDATASOURCE
OPENQUERY = OPENQUERY
OPENROWSET = OPENROWSET
OPENXML = OPENXML
OPTION = OPTION
OR = OR
ORDER = ORDER
OUTER = OUTER
OVER = OVER
PERCENT = PERCENT
PLAN = PLAN
PRECISION = PRECISION
PRIMARY = PRIMARY
PRINT = PRINT
! PROC = PROC
PROCEDURE = PROC(EDURE)?
PUBLIC = PUBLIC
RAISERROR = RAISERROR
READ = READ
READTEXT = READTEXT
RECONFIGURE = RECONFIGURE
REFERENCES = REFERENCES
REPLICATION = REPLICATION
RESTORE = RESTORE
RESTRICT = RESTRICT
RETURN = RETURN
REVOKE = REVOKE
RIGHT = RIGHT
ROLLBACK = ROLLBACK
ROWCOUNT = ROWCOUNT
ROWGUIDCOL = ROWGUIDCOL
RULE = RULE
SAVE = SAVE
SCHEMA = SCHEMA
SELECT = SELECT
SESSION_USER = SESSION_USER
SET = SET
SETUSER = SETUSER
SHUTDOWN = SHUTDOWN
SOME = SOME
STATISTICS = STATISTICS
SYSTEM_USER = SYSTEM_USER
TABLE = TABLE
TEXTSIZE = TEXTSIZE
THEN = THEN
TO = TO
TOP = TOP
! TRAN = TRAN
TRANSACTION = TRAN(SACTION)?
TRIGGER = TRIGGER
TRUNCATE = TRUNCATE
TSEQUAL = TSEQUAL
UNION = UNION
UNIQUE = UNIQUE
UPDATE = UPDATE
UPDATETEXT = UPDATETEXT
USE = USE
USER = USER
VALUES = VALUES
VARYING = VARYING
VIEW = VIEW
WAITFOR = WAITFOR
WHEN = WHEN
WHERE = WHERE
WHILE = WHILE
WITH = WITH
WRITETEXT = WRITETEXT

! Unreserved keywords, to be re-tried as identifier if a syntax error occurs
ABSOLUTE = ABSOLUTE
ACTION = ACTION
AFTER = AFTER
APPLY = APPLY
AUTO = AUTO
CALLED = CALLED
CALLER = CALLER
CAST = CAST
CATCH = CATCH
CHANGE_TRACKING = CHANGE_TRACKING
COLLECTION = COLLECTION
COMMITTED = COMMITTED
COUNT = COUNT
DISABLE = DISABLE
ENABLE = ENABLE
EXPLICIT = EXPLICIT
EXTERNAL = EXTERNAL
FIRST = FIRST
FULLTEXT = FULLTEXT
GLOBAL = GLOBAL
HASH = HASH
INCLUDE = INCLUDE
INPUT = INPUT
INSTEAD = INSTEAD
LANGUAGE = LANGUAGE
LAST = LAST
LOG = LOG
LOOP = LOOP
MANUAL = MANUAL
MARK = MARK
MATCHED = MATCHED
MAXRECURSION = MAXRECURSION
MERGE = MERGE
NAME = NAME
NEXT = NEXT
NO = NO
NOWAIT = NOWAIT
ONLY = ONLY
OUTPUT = OUT(PUT)?
PARTITION = PARTITION
PATH = PATH
PERSISTED = PERSISTED
POPULATION = POPULATION
PRIOR = PRIOR
PROPERTY = PROPERTY
RAW = RAW
READONLY = READONLY
RECOMPILE = RECOMPILE
RELATIVE = RELATIVE
REPEATABLE = REPEATABLE
RETURNS = RETURNS
SCHEMABINDING = SCHEMABINDING
SERVER = SERVER
SETERROR = SETERROR
SOURCE = SOURCE
TARGET = TARGET
TIES = TIES
TRY = TRY
TYPE = TYPE
UNCOMMITTED = UNCOMMITTED
USING = USING
VALUE = VALUE
VIEW_METADATA = VIEW_METADATA
WORK = WORK
XML = XML
XMLNAMESPACES = XMLNAMESPACES

! Special terminal tokens to resolve ambiguities
FOR_UPDATE = FOR{Whitespace}+UPDATE
WITH_CHECK_OPTION = WITH{Whitespace}+CHECK{Whitespace}+OPTION
_ACTION = '$ACTION'
_NAMEONLY = '$NAMEONLY$'

! =============================================================================
! Common Terminals (Names, Literals, ...)
! =============================================================================

<AliasName> ::= Id
              | QuotedId

<AssemblyName> ::= Id
                 | QuotedId

<ClassName> ::= Id
              | QuotedId

<CollationName> ::= Id

<ColumnName> ::= Id
               | QuotedId
               | _ACTION

<ObjectName> ::= Id
               | QuotedId

<ObjectNameQualified> ::= <ObjectName>
                        | <SchemaName> '.' <ObjectName>

<ColumnNameQualified> ::= <ColumnName>
                        | <TableName> '.' <ColumnName>
!                        | <VariableName> '.' <ColumnName>

<ColumnNameList> ::= <ColumnName> ',' <ColumnNameList>
                   | <ColumnName>

<ColumnNameQualifiedList> ::= <ColumnNameQualified> ',' <ColumnNameQualifiedList>
                            | <ColumnNameQualified>

<ColumnWild> ::= '*'

<ColumnWildQualified> ::= <ColumnWild>
                        | <TableName> '.' <ColumnWild>
                        | <VariableName> '.' <ColumnWild>

<ColumnWildNameQualified> ::= <ColumnNameQualified>
                            | <ColumnWildQualified>

<ConstraintName> ::= Id
                   | QuotedId

<CursorName> ::= Id
               | QuotedId

<FunctionName> ::= Id
                 | QuotedId
                 | SystemFuncId

<FunctionNameQualified> ::= <FunctionName>
                          | <SchemaName> '.' <FunctionName>

<IndexName> ::= Id
              | QuotedId

<LabelName> ::= Id
              | QuotedId

<MethodName> ::= Id
               | QuotedId

<ParameterName> ::= LocalId

<ProcedureName> ::= Id
                  | QuotedId

<ProcedureNameQualified> ::= <ProcedureName>
                           | <SchemaName> '.' <ProcedureName>

<TableName> ::= Id
              | QuotedId
              | TempTableId

<TableNameQualified> ::= <TableName>
                       | <SchemaName> '.' <TableName>

<TransactionName> ::= Id
                    | QuotedId

<TriggerName> ::= Id
                | QuotedId

<TriggerNameQualified> ::= <TriggerName>
                         | <SchemaName> '.' <TriggerName>

<SimpleTypeName> ::= Id
                   | QuotedId

<SimpleTypeNameQualified> ::= <SimpleTypeName>
                            | <SchemaName> '.' <SimpleTypeName>

<TypeName> ::= <SimpleTypeName>
             | Id '(' <XmlSchemaCollectionNameQualified> ')' ! e.g. xml([MySchema]) but also VARCHAR(MAX)
             | QuotedId '(' <XmlSchemaCollectionNameQualified> ')' ! e.g. xml([MySchema]) but also VARCHAR(MAX)
             | Id '(' <IntegerLiteral> ')' ! e.g. VARCHAR(20)
             | QuotedId '(' <IntegerLiteral> ')' ! e.g. VARCHAR(20)
             | Id '(' <IntegerLiteral> ',' <IntegerLiteral> ')' ! e.g. DECIMAL(10,5)
             | QuotedId '(' <IntegerLiteral> ',' <IntegerLiteral> ')' ! e.g. DECIMAL(10,5)

<TypeNameQualified> ::= <TypeName>
                      | <SchemaName> '.' <TypeName>

<SchemaName> ::= Id
               | QuotedId

<SystemVariableName> ::= SystemVarId

<VariableName> ::= LocalId

<ViewName> ::= Id
             | QuotedId

<ViewNameQualified> ::= <ViewName>
                      | <SchemaName> '.' <ViewName>

<XmlNamespaceName> ::= Id
                     | QuotedId

<XmlSchemaCollectionName> ::= Id
                            | QuotedId

<XmlSchemaCollectionNameQualified> ::= <XmlSchemaCollectionName>
                                     | <SchemaName> '.' <XmlSchemaCollectionName>

<ExternalName> ::= EXTERNAL NAME <AssemblyName> '.' <ClassName> '.' <MethodName>

<OptionalAs> ::= AS
               |

<StringLiteral> ::= StringLiteral

<IntegerLiteral> ::= IntegerLiteral
                   | HexLiteral

<NumberLiteral> ::= <IntegerLiteral>
                  | RealLiteral

<Literal> ::= <NumberLiteral>
            | <StringLiteral>
            | StringLiteral COLLATE <CollationName>
            | NULL

<Toggle> ::= ON
           | OFF

! =============================================================================
! Any statements allowed as SQL statements in code
! =============================================================================

! In T-SQL, the terminator (;) is usually not required. However, this introduces some ambiguities, so that we require it. 

<StatementGroup> ::= <StatementBlock>
                   | <Statement> 

<StatementBlock> ::= BEGIN <StatementList> END

<StatementList> ::= <StatementGroup>
                  | <StatementGroup> <Terminator>
                  | <StatementGroup> <Terminator> <StatementList>
                  | <Label>
                  | <Label> <StatementList>
                  | <Label> <Terminator>
                  | <Label> <Terminator> <StatementList>

<Terminator> ::= <Terminator> ';'
               | ';'

<Statement> ::= <DDLStatement>
              | <DMLStatement>
              | <PrgStatement>
              | _NAMEONLY <ObjectNameQualified>

<DDLStatement> ::= <CreateFulltextStatement>
                 | <DropFulltextStatement>
                 | <CreateFunctionStatement>
                 | <DropFunctionStatement>
                 | <CreateIndexStatement>
                 | <DropIndexStatement>
                 | <CreateProcedureStatement>
                 | <DropProcedureStatement>
                 | <CreateTableStatement>
                 | <AlterTableStatement> ! We don't need anything but this to handle data update scripts
                 | <DropTableStatement>
                 | <CreateTriggerStatement>
                 | <EnableTriggerStatement>
                 | <DisableTriggerStatement>
                 | <DropTriggerStatement>
                 | <CreateTypeStatement>
                 | <DropTypeStatement>
                 | <CreateViewStatement>
                 | <DropViewStatement>
                 | <CreateXmlSchemaCollectionStatement>
                 | <DropXmlSchemaCollectionStatement>

<DMLStatement> ::= <SelectStatement>
                 | <InsertStatement>
                 | <UpdateStatement>
                 | <DeleteStatement>
                 | <MergeStatement>

<PrgStatement> ::= <AnyStatement>
                 | <BeginTransactionStatement>
                 | <BreakStatement>
                 | <CloseStatement>
                 | <CommitTransactionStatement>
                 | <ContinueStatement>
                 | <DeallocateStatement>
                 | <DeclareStatement>
                 | <ExecuteStatement>
                 | <FetchStatement>
                 | <GotoStatement>
                 | <IfStatement>
                 | <OpenStatement>
                 | <PrintStatement>
                 | <ReturnStatement>
                 | <RollbackTransactionStatement>
                 | <SaveTransactionStatement>
                 | <SetStatement>
                 | <TryCatchStatement>
                 | <WaitforStatement>
                 | <WhileStatement>
                 | <RaiserrorStatement>

! =============================================================================
! Control-of-Flow and simple statements
! =============================================================================

<BreakStatement> ::= BREAK

<ContinueStatement> ::= CONTINUE

<GotoStatement> ::= GOTO <LabelName>

! To avoid the hanging ELSE problem/ambiguity, we just require a block - even if this is more restrictive than T-SQL
<IfStatement> ::= IF <Predicate> <StatementBlock> ELSE <StatementGroup>
                | IF <Predicate> <StatementGroup>

<ReturnStatement> ::= RETURN
                    | RETURN <Expression>

<TryCatchStatement> ::= BEGIN TRY <StatementList> END TRY BEGIN CATCH <StatementList> END CATCH

<WhileStatement> ::= WHILE <Predicate> <StatementGroup>

<WaitforStatement> ::= WAITFOR Id <StringLiteral>
                     | WAITFOR Id <VariableName>

<PrintStatement> ::= PRINT <Expression>

<AnyStatement> ::= Id <ExpressionList>

<RaiserrorStatement> ::= RAISERROR '(' <ExpressionList> ')'
                       | RAISERROR '(' <ExpressionList> ')' WITH <RaiserrorOptionList>

<RaiserrorOption> ::= LOG
                    | NOWAIT
                    | SETERROR

<RaiserrorOptionList> ::= <RaiserrorOption> ',' <RaiserrorOptionList>
                        | <RaiserrorOption>

<Label> ::= Id ':'

! =============================================================================
! DECLARE and Cursor statements
! =============================================================================

<DeclareStatement> ::= DECLARE <VariableName> <OptionalAs> TABLE <TableDefinitionGroup>
                     | DECLARE <DeclareItemList>
                     | DECLARE <CursorName> <CursorDefinition>

<CursorDefinition> ::= CURSOR <CursorOptionList> FOR <SelectStatement>
                     | CURSOR <CursorOptionList> FOR <SelectStatement> <CursorUpdate>

<DeclareItem> ::= <VariableName> CURSOR
                | <VariableName> <OptionalAs> <TypeNameQualified>
                | <VariableName> <OptionalAs> <TypeNameQualified> '=' <Expression>

<DeclareItemList> ::= <DeclareItem> ',' <DeclareItemList>
                    | <DeclareItem>

<CursorOptionList> ::= Id <CursorOptionList>
                     |

<CloseStatement> ::= CLOSE <GlobalOrLocalCursor>

<OpenStatement> ::= OPEN <GlobalOrLocalCursor>

<DeallocateStatement> ::= DEALLOCATE <GlobalOrLocalCursor>

<GlobalOrLocalCursor> ::= <VariableName>
                        | <CursorName>
                        | GLOBAL <CursorName>

<CursorUpdate> ::= FOR_UPDATE OF <ColumnNameList>
                 | FOR_UPDATE
                 | READ ONLY

<FetchStatement> ::= FETCH <CursorPosition> <GlobalOrLocalCursor>
                   | FETCH <CursorPosition> <GlobalOrLocalCursor> INTO <VariableNameList>

<CursorPosition> ::= NEXT FROM
                   | PRIOR FROM
                   | FIRST FROM
                   | LAST FROM
                   | ABSOLUTE <IntegerLiteral> FROM
                   | ABSOLUTE <VariableName> FROM
                   | RELATIVE <IntegerLiteral> FROM
                   | RELATIVE <VariableName> FROM
                   | FROM
                   |

<VariableNameList> ::= <VariableName> ',' <VariableNameList>
                     | <VariableName>

! =============================================================================
! Common helper constructs
! =============================================================================

<OptionalDefault> ::= '=' <Literal>
                    |

<DestinationRowset> ::= <VariableName>
                      | <TableNameQualified> <TableHintGroup>
!                      | <Openrowset> -- not supported
!                      | <Openquery> -- not supported

<Openxml> ::= OPENXML '(' <VariableName> ',' <StringLiteral> ',' <IntegerLiteral> ')' <OptionalOpenxmlSchema>
            | OPENXML '(' <VariableName> ',' <VariableName> ',' <IntegerLiteral> ')' <OptionalOpenxmlSchema>
            | OPENXML '(' <VariableName> ',' <StringLiteral> ')' <OptionalOpenxmlSchema>
            | OPENXML '(' <VariableName> ',' <VariableName> ')' <OptionalOpenxmlSchema>

<OptionalOpenxmlSchema> ::= <OpenxmlImplicitSchema>
                          | <OpenxmlExplicitSchema>
                          |

<OpenxmlImplicitSchema> ::= WITH '(' <TableNameQualified> ')'

<OpenxmlExplicitSchema> ::= WITH '(' <OpenxmlColumnList> ')'

<OpenxmlColumnList> ::= <OpenxmlColumn> ',' <OpenxmlColumnList>
                      | <OpenxmlColumn>

<OpenxmlColumn> ::= <ColumnName> <TypeName> <StringLiteral>
                  | <ColumnName> <TypeName>

! =============================================================================
! SET (both variables and options, but not yet CLR UDT properties and fields)
! =============================================================================

<SetStatement> ::= <SetVariableStatement>
                 | <SetOptionStatement>

<SetVariableStatement> ::= SET <VariableName> '=' <Expression>
                         | SET <VariableName> '.' <NamedFunctionList>
                         | SET <VariableName> '=' <CursorDefinition>

<SetOptionStatement> ::= SET Id <SetValueList>
                       | SET TRANSACTION <SetValueList>
                       | SET OFFSETS <SetValueList>
                       | SET ROWCOUNT <SetValue>
                       | SET STATISTICS <SetValueList>
                       | SET IDENTITY_INSERT <TableNameQualified> <Toggle>

<SetValueList> ::= <SetValue> <SetValueList>
                 | <SetValue>

<SetValue> ::= Id
             | READ UNCOMMITTED
             | READ COMMITTED
             | REPEATABLE READ
             | <Toggle>
             | <IntegerLiteral>
             | <StringValue>

<StringValue> ::= <StringLiteral>
                | <VariableName>

! =============================================================================
! Transaction statements
! =============================================================================

<BeginTransactionStatement> ::= BEGIN TRANSACTION
                              | BEGIN TRANSACTION <TransactionIdentifier>
                              | BEGIN TRANSACTION <TransactionIdentifier> WITH MARK 
                              | BEGIN TRANSACTION <TransactionIdentifier> WITH MARK <StringLiteral>

<CommitTransactionStatement> ::= COMMIT
                               | COMMIT WORK
                               | COMMIT TRANSACTION
                               | COMMIT TRANSACTION <TransactionIdentifier>

<RollbackTransactionStatement> ::= ROLLBACK
                                 | ROLLBACK WORK
                                 | ROLLBACK TRANSACTION
                                 | ROLLBACK TRANSACTION <TransactionIdentifier>

<SaveTransactionStatement> ::= SAVE TRANSACTION <TransactionIdentifier>

<TransactionIdentifier> ::= <TransactionName>
                          | <VariableName>

! =============================================================================
! CREATE/DROP FULLTEXT
! =============================================================================

! We don't allow to specify the catalog name, since the catalog is automatically assigned (module name)

<CreateFulltextStatement> ::= CREATE FULLTEXT INDEX ON TABLE <TableNameQualified> <FulltextColumnGroup> KEY INDEX <IndexName> <FulltextChangeTracking>

<FulltextColumnGroup> ::= '(' <FulltextColumnList> ')'
                        |

<FulltextColumnList> ::= <FulltextColumn> ',' <FulltextColumnList>
                       | <FulltextColumn>

<FulltextColumn> ::= <ColumnName> <FulltextColumnType> <OptionalLanguage>

<FulltextColumnType> ::= TYPE COLUMN <TypeNameQualified>
                       |

<OptionalLanguage> ::= LANGUAGE <IntegerLiteral>
                     | LANGUAGE <StringLiteral>
                     |

<FulltextChangeTracking> ::= WITH CHANGE_TRACKING AUTO
                           | WITH CHANGE_TRACKING MANUAL
                           | WITH CHANGE_TRACKING OFF
                           | WITH CHANGE_TRACKING OFF ',' NO POPULATION
                           |

<DropFulltextStatement> ::= DROP FULLTEXT INDEX ON <TableNameQualified>

! =============================================================================
! CREATE/DROP FUNCTION
! =============================================================================

! We don't allow to specify the schema name, it is implicit (module name)

<CreateFunctionStatement> ::= CREATE FUNCTION <FunctionNameQualified> '(' <OptionalFunctionParameterList> ')' RETURNS <TypeNameQualified> <OptionalFunctionOption> <OptionalAs> <StatementBlock>
                            | CREATE FUNCTION <FunctionNameQualified> '(' <OptionalFunctionParameterList> ')' RETURNS TABLE <OptionalFunctionOption> <OptionalAs> RETURN <FunctionInlineSelect>
                            | CREATE FUNCTION <FunctionNameQualified> '(' <OptionalFunctionParameterList> ')' RETURNS <VariableName> TABLE <TableDefinitionGroup> <OptionalFunctionOption> <OptionalAs> <StatementBlock>
                            | CREATE FUNCTION <FunctionNameQualified> '(' <OptionalFunctionParameterList> ')' RETURNS <TypeNameQualified> <OptionalFunctionOption> <OptionalAs> <ExternalName>
                            | CREATE FUNCTION <FunctionNameQualified> '(' <OptionalFunctionParameterList> ')' RETURNS TABLE <TableDefinitionGroup> <OptionalFunctionOption> <OptionalAs> <ExternalName>

<OptionalFunctionParameterList> ::= <FunctionParameterList>
                                  |

<FunctionParameterList> ::= <FunctionParameter> ',' <FunctionParameterList>
                          | <FunctionParameter>

<FunctionParameter> ::= <ParameterName> <OptionalAs> <TypeNameQualified> <OptionalDefault> <OptionalReadonly>

<FunctionInlineSelect> ::= <SelectStatement>
                         | '(' <FunctionInlineSelect> ')'

! The option ENCRYPTION is handled by the module and therefore not allowed
<OptionalFunctionOption> ::= WITH RETURNS NULL ON NULL INPUT
                           | WITH CALLED ON NULL INPUT
                           | WITH EXECUTE AS CALLER
                           | WITH SCHEMABINDING
                           |

<DropFunctionStatement> ::= DROP FUNCTION <FunctionNameQualified>

! =============================================================================
! CREATE/DROP PROCEDURE and EXECUTE
! =============================================================================

<CreateProcedureStatement> ::= CREATE PROCEDURE <ProcedureNameQualified> <ProcedureParameterGroup> <ProcedureOptionGroup> <ProcedureFor> AS <StatementBlock>

<ProcedureParameterGroup> ::= '(' <ProcedureParameterList> ')'
                            | <ProcedureParameterList>
                            | '(' ')'
                            |

<ProcedureParameterList> ::= <ProcedureParameter> ',' <ProcedureParameterList>
                           | <ProcedureParameter>

<ProcedureParameter> ::= <ParameterName> <TypeNameQualified> <OptionalVarying> <OptionalDefault> <OptionalOutput> <OptionalReadonly>

<OptionalVarying> ::= VARYING
                    |

<OptionalOutput> ::= OUTPUT
                   |

<OptionalReadonly> ::= READONLY
                     |

<ProcedureOptionGroup> ::= WITH RECOMPILE
                         |

<ProcedureFor> ::= FOR REPLICATION
                 |

<DropProcedureStatement> ::= DROP PROCEDURE <ProcedureNameQualified>

<ExecuteStatement> ::= EXECUTE <VariableName> '=' <ProcedureNameQualified> <ExecuteParameterGroup> <ProcedureOptionGroup>
                     | EXECUTE <ProcedureNameQualified> <ExecuteParameterGroup> <ProcedureOptionGroup>

<ExecuteParameterGroup> ::= <ExecuteParameterList>
                          |

<ExecuteParameterList> ::= <ExecuteParameter> ',' <ExecuteParameterList>
                         | <ExecuteParameter>

<ExecuteParameter> ::= <TableNameQualified> ! for the system "sp_*" SPs
                     | <ParameterName> '=' <VariableName> <OptionalOutput>
                     | <ParameterName> '=' <SystemVariableName> <OptionalOutput>
                     | <ParameterName> '=' <Literal> <OptionalOutput>
                     | <VariableName> <OptionalOutput>
                     | <SystemVariableName> <OptionalOutput>
                     | <Literal> <OptionalOutput>

! =============================================================================
! CREATE/ALTER/DROP TABLE
! =============================================================================

! We don't support the ON option, filegroup is managed by module manager

<CreateTableStatement> ::= CREATE TABLE <TableNameQualified> <TableDefinitionGroup>

<AlterTableStatement> ::= ALTER TABLE <TableNameQualified> ALTER COLUMN <ColumnName> <ColumnDefinition>
                        | ALTER TABLE <TableNameQualified> ALTER COLUMN <ColumnName> ADD ROWGUIDCOL
                        | ALTER TABLE <TableNameQualified> ALTER COLUMN <ColumnName> DROP ROWGUIDCOL
                        | ALTER TABLE <TableNameQualified> ALTER COLUMN <ColumnName> ADD PERSISTED
                        | ALTER TABLE <TableNameQualified> ALTER COLUMN <ColumnName> DROP PERSISTED
                        | ALTER TABLE <TableNameQualified> ALTER COLUMN <ColumnName> ADD NOT FOR REPLICATION
                        | ALTER TABLE <TableNameQualified> ALTER COLUMN <ColumnName> DROP NOT FOR REPLICATION
                        | ALTER TABLE <TableNameQualified> <TableCheck> ADD <TableDefinitionList>
                        | ALTER TABLE <TableNameQualified> <TableCheck> ADD <ColumnConstraint> FOR <ColumnName>
                        | ALTER TABLE <TableNameQualified> <TableCheck> NOCHECK CONSTRAINT <ConstraintName>
                        | ALTER TABLE <TableNameQualified> <TableCheck> NOCHECK CONSTRAINT ALL
                        | ALTER TABLE <TableNameQualified> <TableCheck> CHECK CONSTRAINT <ConstraintName>
                        | ALTER TABLE <TableNameQualified> <TableCheck> CHECK CONSTRAINT ALL
                        | ALTER TABLE <TableNameQualified> DROP <ConstraintName>
                        | ALTER TABLE <TableNameQualified> DROP CONSTRAINT <ConstraintName>
                        | ALTER TABLE <TableNameQualified> DROP COLUMN <ColumnName>

<TableCheck> ::= WITH CHECK
               | WITH NOCHECK
               |

<DropTableStatement> ::= DROP TABLE <TableNameQualified>

! =============================================================================
! CREATE/DROP VIEW
! =============================================================================

<CreateViewStatement> ::= CREATE VIEW <ViewNameQualified> <ColumnNameGroup> <ViewOptionalAttribute> AS <SelectStatement> <ViewOptionalCheckOption>

<ColumnNameGroup> ::= '(' <ColumnNameList> ')'
                    |

<ViewOptionalAttribute> ::= WITH VIEW_METADATA
                          | WITH SCHEMABINDING
                          |

<ViewOptionalCheckOption> ::= WITH_CHECK_OPTION
                            |

<DropViewStatement> ::= DROP VIEW <ViewNameQualified>

! =============================================================================
! CREATE/DROP INDEX
! =============================================================================

! We don't support the ON option, filegroup is managed by module manager

<CreateIndexStatement> ::= CREATE <IndexOptionalUnique> <ConstraintCluster> INDEX <IndexName> ON <TableNameQualified> '(' <IndexColumnList> ')' INCLUDE '(' <ColumnNameList> ')' WHERE <Predicate> <IndexOptionGroup>
                         | CREATE <IndexOptionalUnique> <ConstraintCluster> INDEX <IndexName> ON <TableNameQualified> '(' <IndexColumnList> ')' INCLUDE '(' <ColumnNameList> ')' <IndexOptionGroup>
                         | CREATE <IndexOptionalUnique> <ConstraintCluster> INDEX <IndexName> ON <TableNameQualified> '(' <IndexColumnList> ')' WHERE <Predicate> <IndexOptionGroup>
                         | CREATE <IndexOptionalUnique> <ConstraintCluster> INDEX <IndexName> ON <TableNameQualified> '(' <IndexColumnList> ')' <IndexOptionGroup>
                         | CREATE PRIMARY XML INDEX <IndexName> ON <TableNameQualified> '(' <ColumnName> ')' <IndexUsing> <IndexOptionGroup>
                         | CREATE XML INDEX <IndexName> ON <TableNameQualified> '(' <ColumnName> ')' <IndexUsing> <IndexOptionGroup>

<IndexColumnList> ::= <IndexColumn> ',' <IndexColumnList>
                    | <IndexColumn>

<IndexOptionalUnique> ::= UNIQUE
                        |

<IndexColumn> ::= <ColumnName> <OrderType> 

<IndexOptionGroup> ::= WITH FILLFACTOR '=' <IntegerLiteral>
                     | WITH '(' <IndexOptionList> ')'
                     |

<IndexOptionList> ::= <IndexOption> ',' <IndexOptionList>
                    | <IndexOption>

<IndexOption> ::= Id '=' <IntegerLiteral>
                | Id '=' <Toggle>

<IndexUsing> ::= USING XML INDEX <IndexName> FOR VALUE
               | USING XML INDEX <IndexName> FOR PATH
               | USING XML INDEX <IndexName> FOR PROPERTY
               |

<DropIndexStatement> ::= DROP INDEX <IndexName> ON <TableNameQualified> <IndexOptionGroup>

! =============================================================================
! CREATE/DROP TRIGGER
! =============================================================================

! Only DML triggers are supported

<CreateTriggerStatement> ::= CREATE TRIGGER <TriggerNameQualified> ON <TableNameQualified> <TriggerType> <TriggerOperationList> <OptionalNotForReplication> AS <StatementGroup>

<TriggerType> ::= FOR
                | INSTEAD OF
                | AFTER

<TriggerOperationList> ::= <TriggerOperation> ',' <TriggerOperationList>
                         | <TriggerOperation>

<TriggerOperation> ::= INSERT
                     | UPDATE
                     | DELETE

<OptionalNotForReplication> ::= NOT FOR REPLICATION
                              |

<TriggerTarget> ::= <TableNameQualified>
                  | DATABASE
                  | ALL SERVER

<EnableTriggerStatement> ::= ENABLE TRIGGER ALL ON <TriggerTarget>
                           | ENABLE TRIGGER <TriggerNameQualifiedList> ON <TriggerTarget>

<DisableTriggerStatement> ::= DISABLE TRIGGER ALL ON <TriggerTarget>
                            | DISABLE TRIGGER <TriggerNameQualifiedList> ON <TriggerTarget>

<TriggerNameQualifiedList> ::= <TriggerNameQualified> ',' <TriggerNameQualifiedList>
                             | <TriggerNameQualified>

<DropTriggerStatement> ::= DROP TRIGGER <TriggerNameQualified>

! =============================================================================
! CREATE/DROP XML SCHEMA COLLECTION
! =============================================================================

<CreateXmlSchemaCollectionStatement> ::= CREATE XML SCHEMA COLLECTION <XmlSchemaCollectionNameQualified> AS StringLiteral
                                       | CREATE XML SCHEMA COLLECTION <XmlSchemaCollectionNameQualified> AS <VariableName>

<DropXmlSchemaCollectionStatement> ::= DROP XML SCHEMA COLLECTION <XmlSchemaCollectionNameQualified>

! =============================================================================
! CREATE/DROP TYPE
! =============================================================================

<CreateTypeStatement> ::= CREATE TYPE <SimpleTypeNameQualified> FROM <TypeName> <TypeConstraint>
                        | CREATE TYPE <SimpleTypeNameQualified> AS TABLE <TableDefinitionGroup>

<TypeConstraint> ::= NOT NULL
                   | NULL
                   |

<DropTypeStatement> ::= DROP TYPE <SimpleTypeNameQualified>

! =============================================================================
! Table/Column Type Definitions
! =============================================================================

<TableDefinitionGroup> ::= '(' <TableDefinitionList> ')'

<TableDefinitionList> ::= <TableDefinition> ',' <TableDefinitionList>
                        | <TableDefinition>

<TableDefinition> ::= <ColumnName> <ColumnDefinition>
                    | <TableConstraint>

<TableConstraint> ::= CONSTRAINT <ConstraintName> PRIMARY KEY <ConstraintCluster> '(' <IndexColumnList> ')' <IndexOptionGroup>
                    | CONSTRAINT <ConstraintName> UNIQUE <ConstraintCluster> '(' <IndexColumnList> ')' <IndexOptionGroup>
                    | CONSTRAINT <ConstraintName> FOREIGN KEY '(' <ColumnNameList> ')' REFERENCES <TableNameQualified> <ColumnNameGroup> <ForeignKeyActionList>
                    | CONSTRAINT <ConstraintName> CHECK <OptionalNotForReplication> '(' <Predicate> ')'
                    | PRIMARY KEY <ConstraintCluster> '(' <IndexColumnList> ')' <IndexOptionGroup>
                    | UNIQUE <ConstraintCluster> '(' <IndexColumnList> ')' <IndexOptionGroup>
                    | FOREIGN KEY '(' <ColumnNameList> ')' REFERENCES <TableNameQualified> <ColumnNameGroup> <ForeignKeyActionList>
                    | CHECK <OptionalNotForReplication> '(' <Predicate> ')'

<ForeignKeyActionList> ::= <ForeignKeyAction> <ForeignKeyActionList>
                         |

<ForeignKeyAction> ::= ON DELETE NO ACTION
                     | ON DELETE CASCADE
                     | ON DELETE SET NULL
                     | ON DELETE SET DEFAULT
                     | ON UPDATE NO ACTION
                     | ON UPDATE CASCADE
                     | ON UPDATE SET NULL
                     | ON UPDATE SET DEFAULT

<OptionalForeignRefColumn> ::= '(' <ColumnName> ')'
                             |

<ColumnDefinition> ::= <TypeNameQualified> <ColumnConstraintList>
                     | AS <Expression> <ComputedColumnConstraintList>

<ColumnConstraintList> ::= <ColumnConstraint> <ColumnConstraintList>
                         | 

<ColumnConstraint> ::= <NamedColumnConstraint>
                     | COLLATE <CollationName>
                     | IDENTITY 
                     | IDENTITY '(' IntegerLiteral ',' IntegerLiteral ')'
                     | ROWGUIDCOL
                     | NOT NULL
                     | NULL

<ComputedColumnConstraintList> ::= <ComputedColumnConstraint> <ComputedColumnConstraintList>
                                 | 

<ComputedColumnConstraint> ::= <NamedColumnConstraint>
                             | PERSISTED
                             | NOT NULL

<NamedColumnConstraint> ::= CONSTRAINT <ConstraintName> PRIMARY KEY <ConstraintCluster> <IndexOptionGroup>
                          | CONSTRAINT <ConstraintName> UNIQUE <ConstraintCluster> <IndexOptionGroup>
                          | CONSTRAINT <ConstraintName> FOREIGN KEY REFERENCES <TableNameQualified> <OptionalForeignRefColumn> <ForeignKeyActionList>
                          | CONSTRAINT <ConstraintName> REFERENCES <TableNameQualified> <OptionalForeignRefColumn> <ForeignKeyActionList>
                          | CONSTRAINT <ConstraintName> CHECK <OptionalNotForReplication> '(' <Predicate> ')'
                          | CONSTRAINT <ConstraintName> DEFAULT <ConstraintDefaultValue>
                          | PRIMARY KEY <ConstraintCluster> <IndexOptionGroup>
                          | UNIQUE <ConstraintCluster> <IndexOptionGroup>
                          | FOREIGN KEY REFERENCES <TableNameQualified> <OptionalForeignRefColumn> <ForeignKeyActionList>
                          | REFERENCES <TableNameQualified> <OptionalForeignRefColumn> <ForeignKeyActionList>
                          | CHECK <OptionalNotForReplication> '(' <Predicate> ')'
                          | DEFAULT <ConstraintDefaultValue>

<ConstraintCluster> ::= CLUSTERED
                      | NONCLUSTERED
                      |

<ConstraintDefaultValue> ::= <ExpressionParens>
                           | <FunctionCall>
                           | <NumberLiteral>
                           | <StringLiteral>
                           | NULL

! =============================================================================
! Common Table Expressions, TOP and OUTPUT clauses
! =============================================================================

<QueryOptions> ::= WITH XMLNAMESPACES '(' <XmlNamespaceList> ')'
             | WITH XMLNAMESPACES '(' <XmlNamespaceList> ')' ',' <CTEList>
             | WITH <CTEList>
             |

<XmlNamespaceList> ::= <XmlNamespace> ',' <XmlNamespaceList>
                     | <XmlNamespace>

<XmlNamespace> ::= <StringLiteral> AS <XmlNamespaceName>

<CTEList> ::= <CTE> ',' <CTEList>
            | <CTE>

<CTE> ::= <AliasName> <ColumnNameGroup> AS '(' <SelectQuery> ')'

<Top> ::= TOP '(' <Expression> ')' <OptionalPercent> <OptionalWithTies>

<OptionalTop> ::= <Top>
                |

<OptionalPercent> ::= PERCENT
                    |

<OptionalWithTies> ::= WITH TIES
                     |

<OutputClause> ::= OUTPUT <ColumnItemList>
                 | OUTPUT <ColumnItemList> INTO <DestinationRowset> <ColumnNameGroup>
                 |

<QueryHint> ::= OPTION '(' <QueryHintOptionList> ')'
              |

<QueryHintOption> ::= MAXRECURSION IntegerLiteral
                    | RECOMPILE

<QueryHintOptionList> ::= <QueryHintOption> ',' <QueryHintOptionList>
                        | <QueryHintOption>

! =============================================================================
! INSERT Statement
! =============================================================================

<InsertStatement> ::= <QueryOptions> INSERT <OptionalTop> <OptionalInto> <DestinationRowset> <ColumnNameGroup> <OutputClause> VALUES <ValuesList> <QueryHint>
                    | <QueryOptions> INSERT <OptionalTop> <OptionalInto> <DestinationRowset> <ColumnNameGroup> <OutputClause> <SelectQuery> <QueryHint>
                    | <QueryOptions> INSERT <OptionalTop> <OptionalInto> <DestinationRowset> <ColumnNameGroup> <OutputClause> <ExecuteStatement> <QueryHint>
                    | <QueryOptions> INSERT <OptionalTop> <OptionalInto> <DestinationRowset> DEFAULT VALUES <QueryHint>

<OptionalInto> ::= INTO
                 |

! =============================================================================
! MERGE Statement
! =============================================================================

<MergeStatement> ::= <QueryOptions> MERGE <OptionalTop> <OptionalInto> <DestinationRowset> <RowsetAlias> USING <SourceRowset> ON <Predicate> <MergeWhenMatchedList> <OutputClause> <QueryHint>

<MergeWhenMatchedList> ::= <MergeWhenMatched> <MergeWhenMatchedList>
                         | <MergeWhenMatched>

<MergeWhenMatched> ::= WHEN MATCHED AND <Predicate> THEN <MergeMatched>
                     | WHEN MATCHED THEN <MergeMatched>
                     | WHEN NOT MATCHED BY TARGET AND <Predicate> THEN <MergeNotMatched>
                     | WHEN NOT MATCHED BY TARGET THEN <MergeNotMatched>
                     | WHEN NOT MATCHED AND <Predicate> THEN <MergeNotMatched>
                     | WHEN NOT MATCHED THEN <MergeNotMatched>
                     | WHEN NOT MATCHED BY SOURCE AND <Predicate> THEN <MergeMatched>
                     | WHEN NOT MATCHED BY SOURCE THEN <MergeMatched>

<MergeMatched> ::= UPDATE SET <UpdateItemList>
                 | DELETE

<MergeNotMatched> ::= INSERT <ColumnNameGroup> VALUES '(' <ExpressionList> ')'
                    | INSERT <ColumnNameGroup> DEFAULT VALUES

! =============================================================================
! UPDATE Statement
! =============================================================================

<UpdateStatement> ::= <QueryOptions> UPDATE <OptionalTop> <DestinationRowset> SET <UpdateItemList> <OutputClause> <OptionalFromClause> <WhereClause> <QueryHint>

<UpdateItemList> ::= <UpdateItem> ',' <UpdateItemList>
                   | <UpdateItem>

<UpdateItem> ::= <ColumnNameQualified> '=' <Expression>
!               | <ColumnNameQualified> '=' <ColumnNameQualified> .WRITE -- syntax not yet implemented
               | <ColumnNameQualified> '=' DEFAULT
               | <VariableName> '=' <Expression>
               | <VariableName> '=' <ColumnNameQualified> '=' <Expression>
               | <VariableName> '.' <NamedFunctionList>
               | <TableName> '.' <NamedFunctionList> ! TableName is in fact a ColumnName
               | <TableName> '.' <ColumnName> '.' <NamedFunctionList>

<OptionalFromClause> ::= <FromClause>
                       |

! =============================================================================
! DELETE Statement
! =============================================================================

<DeleteStatement> ::= <QueryOptions> DELETE <OptionalTop> <OptionalFrom> <DestinationRowset> <OutputClause> <OptionalFromClause> <WhereClause> <QueryHint>

<OptionalFrom> ::= FROM
                 |

! =============================================================================
! SELECT Statement
! =============================================================================

<SelectStatement> ::= <QueryOptions> <SelectQuery> <QueryHint>

<SelectQuery> ::= SELECT <Restriction> <TopLegacy> <ColumnItemList> <IntoClause> <FromClause> <WhereClause> <GroupClause> <HavingClause> <OptionalOrderClause> <RowsetCombineClause>
                | SELECT <Restriction> <TopLegacy> <ColumnItemList> <IntoClause> <FromClause> <WhereClause> <GroupClause> <HavingClause> <OptionalOrderClause> <ForClause>
                | SELECT <Restriction> <ColumnItemList> <IntoClause> <FromClause> <WhereClause> <GroupClause> <HavingClause> <OptionalOrderClause> <RowsetCombineClause>
                | SELECT <Restriction> <ColumnItemList> <IntoClause> <FromClause> <WhereClause> <GroupClause> <HavingClause> <OptionalOrderClause> <ForClause>
                | SELECT <TopLegacy> <ColumnItemList> <IntoClause> <FromClause> <WhereClause> <GroupClause> <HavingClause> <OptionalOrderClause> <RowsetCombineClause>
                | SELECT <TopLegacy> <ColumnItemList> <IntoClause> <FromClause> <WhereClause> <GroupClause> <HavingClause> <OptionalOrderClause> <ForClause>
                | SELECT <ColumnItemList> <IntoClause> <FromClause> <WhereClause> <GroupClause> <HavingClause> <OptionalOrderClause> <RowsetCombineClause>
                | SELECT <ColumnItemList> <IntoClause> <FromClause> <WhereClause> <GroupClause> <HavingClause> <OptionalOrderClause> <ForClause>
                | SELECT <Restriction> <TopLegacy> <ColumnItemList> <IntoClause> <WhereClause> <RowsetCombineClause>
                | SELECT <Restriction> <TopLegacy> <ColumnItemList> <IntoClause> <WhereClause> <ForClause>
                | SELECT <Restriction> <ColumnItemList> <IntoClause> <WhereClause> <RowsetCombineClause>
                | SELECT <Restriction> <ColumnItemList> <IntoClause> <WhereClause> <ForClause>
                | SELECT <TopLegacy> <ColumnItemList> <IntoClause> <WhereClause> <RowsetCombineClause>
                | SELECT <TopLegacy> <ColumnItemList> <IntoClause> <WhereClause> <ForClause>
                | SELECT <ColumnItemList> <IntoClause> <WhereClause> <RowsetCombineClause>
                | SELECT <ColumnItemList> <IntoClause> <WhereClause> <ForClause>

<TopLegacy> ::= TOP IntegerLiteral <OptionalPercent>
              | <Top>

<ColumnItemList> ::= <ColumnItem> ',' <ColumnItemList>
                   | <ColumnItem>

<ColumnItem> ::= <ColumnWildQualified>
               | <Expression>
               | <Expression> <OptionalAs> <AliasName>
               | <AliasName> '=' <Expression>
               | <VariableName> '=' <Expression>

<Restriction> ::= ALL
                | DISTINCT

<IntoClause> ::= INTO <DestinationRowset>
               |

<FromClause> ::= FROM <Source> <JoinChain>

<Source> ::= <SourceRowset> 
           | '(' <Source> <JoinChain> ')'

<JoinChain> ::= <Join> <JoinChain>
              |

<Join> ::= JOIN <Source> ON <Predicate>
         | INNER <JoinHint> JOIN <Source> ON <Predicate>
         | LEFT <JoinHint> JOIN <Source> ON <Predicate>
         | LEFT OUTER <JoinHint> JOIN <Source> ON <Predicate>
         | RIGHT <JoinHint> JOIN <Source> ON <Predicate>
         | RIGHT OUTER <JoinHint> JOIN <Source> ON <Predicate>
         | FULL <JoinHint> JOIN <Source> ON <Predicate>
         | FULL OUTER <JoinHint> JOIN <Source> ON <Predicate>
         | CROSS JOIN <Source>
         | CROSS APPLY <Source>
         | OUTER APPLY <Source>

<JoinHint> ::= MERGE
             | HASH
             | LOOP
             |

<SourceRowset> ::= <VariableName> <RowsetAlias>
                 | <VariableName> '.' <NamedFunction> <RowsetAlias> ! XML nodes() function: http://msdn.microsoft.com/en-us/library/ms188282(v=SQL.90).aspx
                 | <VariableName> '.' <ColumnName> '.' <NamedFunction> <RowsetAlias> ! XML nodes() function on a table variable
                 | <TableNameQualified> <RowsetAlias> <TableHintGroup>
                 | <Openxml> <RowsetAlias>
                 | <TextTableFunction> <RowsetAlias>
                 | <NamedFunction> <RowsetAlias>
                 | <SchemaName> '.' <NamedFunction> <RowsetAlias>
                 | <SchemaName> '.' <TableName> '.' <NamedFunction> <RowsetAlias> ! also XML nodes() function; but with shifted names (SchemaName should be TableName, TableName should be ColumnName)
!                 | <SchemaName> '.' <TableName> '.' <ColumnName> '.' <FunctionCall> <RowsetAlias> ! also XML nodes() function
                 | <SchemaName> '.' <TableName> '.' <TableName> <RowsetAlias> !Table in a different DB
                 | <SchemaName> '.' <TableName> '.' <SchemaName> '.' <TableName> <RowsetAlias> !Table in a different DB on a different server
                 | '(' VALUES <ValuesList> ')' <RowsetAlias>
                 | '(' <SelectQuery> ')' <RowsetAlias>

<RowsetAlias> ::= <OptionalAs> <AliasName> '(' <ColumnNameList> ')'
                | <OptionalAs> <AliasName>
                |

<ValuesList> ::= '(' <ExpressionList> ')' ',' <ValuesList>
               | '(' <ExpressionList> ')'

<TextTableFunction> ::= CONTAINSTABLE '(' <TableNameQualified> ',' <ColumnName> ',' <Expression> ',' LANGUAGE <Literal> <OptionalContainsTop> ')'
                      | CONTAINSTABLE '(' <TableNameQualified> ',' <ColumnName> ',' <Expression> <OptionalContainsTop> ')'
                      | CONTAINSTABLE '(' <TableNameQualified> ',' <ColumnWild> ',' <Expression> ',' LANGUAGE <Literal> <OptionalContainsTop> ')'
                      | CONTAINSTABLE '(' <TableNameQualified> ',' <ColumnWild> ',' <Expression> <OptionalContainsTop> ')'
                      | CONTAINSTABLE '(' <TableNameQualified> ',' '(' <ColumnNameList> ')' ',' <Expression> ',' LANGUAGE <Literal> <OptionalContainsTop> ')'
                      | CONTAINSTABLE '(' <TableNameQualified> ',' '(' <ColumnNameList> ')' ',' <Expression> <OptionalContainsTop> ')'
                      | FREETEXTTABLE '(' <TableNameQualified> ',' <ColumnName> ',' <Expression> ',' LANGUAGE <Literal> <OptionalContainsTop> ')'
                      | FREETEXTTABLE '(' <TableNameQualified> ',' <ColumnName> ',' <Expression> <OptionalContainsTop> ')'
                      | FREETEXTTABLE '(' <TableNameQualified> ',' <ColumnWild> ',' <Expression> ',' LANGUAGE <Literal> <OptionalContainsTop> ')'
                      | FREETEXTTABLE '(' <TableNameQualified> ',' <ColumnWild> ',' <Expression> <OptionalContainsTop> ')'
                      | FREETEXTTABLE '(' <TableNameQualified> ',' '(' <ColumnNameList> ')' ',' <Expression> ',' LANGUAGE <Literal> <OptionalContainsTop> ')'
                      | FREETEXTTABLE '(' <TableNameQualified> ',' '(' <ColumnNameList> ')' ',' <Expression> <OptionalContainsTop> ')'

<OptionalContainsTop> ::= ',' <IntegerLiteral>
                        |

<TableHintGroup> ::= WITH '(' <TableHintList> ')'
                   |

<TableHintList> ::= <TableHint> ',' <TableHintList>
                  | <TableHint>

<TableHint> ::= INDEX '(' <IndexValueList> ')'
              | HOLDLOCK
              | Id

<IndexValueList> ::= IntegerLiteral ',' <IndexValueList>
                   | IntegerLiteral

<WhereClause> ::= WHERE <Predicate>
                |

<GroupClause> ::= GROUP BY <ExpressionList>
                |

<OrderClause> ::= ORDER BY <OrderList>

<OptionalOrderClause> ::= <OrderClause>
                        |

<OrderList> ::= <Order> ',' <OrderList>
              | <Order>

<Order> ::= <Expression> <OrderType>

<OrderType> ::= ASC
              | DESC
              |

<HavingClause> ::= HAVING <Predicate>
                 |

<RowsetCombineClause> ::= UNION <SelectQuery>
                        | UNION ALL <SelectQuery>
                        | EXCEPT <SelectQuery>
                        | INTERSECT <SelectQuery>

<ForClause> ::= FOR BROWSE
              | FOR XML AUTO <XmlDirectiveList>
              | FOR XML RAW <OptionalElementName> <XmlDirectiveList>
              | FOR XML EXPLICIT <XmlDirectiveList>
              | FOR XML PATH <OptionalElementName> <XmlDirectiveList>
              |

<OptionalElementName> ::= '(' StringLiteral ')'
                        |

<XmlDirectiveList> ::= ',' <XmlDirective> <XmlDirectiveList>
                     | 

<XmlDirective> ::= Id <OptionalElementName>
                 | Id Id

! ============================================================================= 
! Pedicates and Expressions
! =============================================================================

<Predicate> ::= <PredicateOr>

<PredicateOr> ::= <PredicateAnd> OR <PredicateOr>
                | <PredicateAnd>

<PredicateAnd> ::= <PredicateNot> AND <PredicateAnd>
                 | <PredicateNot>

<PredicateNot> ::= NOT <PredicateCompare>
                 | <PredicateCompare>

<PredicateCompare> ::= <Expression> '=' <Expression>
                     | <Expression> '>' <Expression>
                     | <Expression> '<' <Expression>
                     | <Expression> '>=' <Expression>
                     | <Expression> '<=' <Expression>
                     | <Expression> '<>' <Expression>
                     | <Expression> '!=' <Expression>
                     | <Expression> '!<' <Expression>
                     | <Expression> '!>' <Expression>
                     | <Expression> '=' <SubqueryTest>
                     | <Expression> '>' <SubqueryTest>
                     | <Expression> '<' <SubqueryTest>
                     | <Expression> '>=' <SubqueryTest>
                     | <Expression> '<=' <SubqueryTest>
                     | <Expression> '<>' <SubqueryTest>
                     | <Expression> '!=' <SubqueryTest>
                     | <Expression> '!<' <SubqueryTest>
                     | <Expression> '!>' <SubqueryTest>
                     | <Expression> BETWEEN <Expression> AND <Expression>
                     | <Expression> NOT BETWEEN <Expression> AND <Expression>
                     | <Expression> IS NULL
                     | <Expression> IS NOT NULL
                     | <Expression> LIKE <Expression>
                     | <Expression> LIKE <Expression> ESCAPE StringLiteral
                     | <Expression> NOT LIKE <Expression>
                     | <Expression> NOT LIKE <Expression> ESCAPE StringLiteral
                     | <Expression> IN <Tuple>
                     | <Expression> NOT IN <Tuple>
                     | <PredicateFunction>

<SubqueryTest> ::= ANY '(' <SelectQuery> ')'
                 | ALL '(' <SelectQuery> ')'
                 | SOME '(' <SelectQuery> ')'

<Tuple> ::= '(' <SelectQuery> ')'
          | '(' <ExpressionList> ')'

<ExpressionList> ::= <Expression> ',' <ExpressionList>
                   | <Expression>

<PredicateFunction> ::= EXISTS '(' <SelectQuery> ')'
                      | UPDATE '(' <ColumnName> ')'
                      | CONTAINS '(' <ColumnWildNameQualified> ',' <Expression> ',' LANGUAGE <Literal> ')'
                      | CONTAINS '(' <ColumnWildNameQualified> ',' <Expression> ')'
                      | CONTAINS '(' '(' <ColumnNameQualifiedList> ')' ',' <Expression> ',' LANGUAGE <Literal> ')'
                      | CONTAINS '(' '(' <ColumnNameQualifiedList> ')' ',' <Expression> ')'
                      | FREETEXT '(' <ColumnWildNameQualified> ',' <Expression> ',' LANGUAGE <Literal> ')'
                      | FREETEXT '(' <ColumnWildNameQualified> ',' <Expression> ')'
                      | FREETEXT '(' '(' <ColumnNameQualifiedList> ')' ',' <Expression> ',' LANGUAGE <Literal> ')'
                      | FREETEXT '(' '(' <ColumnNameQualifiedList> ')' ',' <Expression> ')'
                      | <PredicateParens>

<PredicateParens> ::= '(' <Predicate> ')'

<Expression> ::= <ExpressionAdd>

<ExpressionAdd> ::= <ExpressionMult> '+' <ExpressionAdd>
                  | <ExpressionMult> '-' <ExpressionAdd>
                  | <ExpressionMult> '&' <ExpressionAdd>
                  | <ExpressionMult> '|' <ExpressionAdd>
                  | <ExpressionMult> '^' <ExpressionAdd>
                  | <ExpressionMult>

<ExpressionMult> ::= <ExpressionMult> '*' <ExpressionNegate> 
                   | <ExpressionMult> '/' <ExpressionNegate> 
                   | <ExpressionMult> '%' <ExpressionNegate> 
                   | <ExpressionNegate>

<ExpressionNegate> ::= '-' <ExpressionCase>
                     | '+' <ExpressionCase> ! the "unary plus" also belongs somewhere here
                     | '~' <ExpressionCase>
                     | <ExpressionCase>

<RankingArguments> ::= PARTITION BY <ExpressionList> <OptionalOrderClause>
                     | <OrderClause>

<ExpressionCase> ::= CASE <Expression> <CaseWhenExpressionList> ELSE <Expression> END
                   | CASE <Expression> <CaseWhenExpressionList> END
                   | CASE <CaseWhenPredicateList> ELSE <Expression> END
                   | CASE <CaseWhenPredicateList> END
                   | <CollatedValue>

<CaseWhenExpressionList> ::= <CaseWhenExpression> <CaseWhenExpressionList>
                           | <CaseWhenExpression>
                           
<CaseWhenExpression> ::= WHEN <Expression> THEN <Expression>

<CaseWhenPredicateList> ::= <CaseWhenPredicate> <CaseWhenPredicateList>
                           | <CaseWhenPredicate>
                           
<CaseWhenPredicate> ::= WHEN <Predicate> THEN <Expression>

<CollatedValue> ::= <Value> COLLATE <CollationName>
                  | <Value>
                  | <Literal>
     
<FunctionCall> ::= CAST '(' <Expression> AS <TypeName> ')'
                 | COALESCE '(' <ExpressionList> ')'
                 | NULLIF '(' <Expression> ',' <Expression> ')'
                 | LEFT '(' <Expression> ',' <Expression> ')'
                 | RIGHT '(' <Expression> ',' <Expression> ')'
                 | CONVERT '(' <TypeName> ',' <Expression> ')'
                 | CONVERT '(' <TypeName> ',' <Expression> ',' IntegerLiteral ')'
                 | COUNT '(' <ColumnWild> ')'
                 | COUNT '(' <Expression> ')'
                 | COUNT '(' <Restriction> <ColumnWild> ')'
                 | COUNT '(' <Restriction> <Expression> ')'
                 | IDENTITY '(' <TypeName> ')'
                 | IDENTITY '(' <TypeName> ',' <IntegerLiteral> ',' <IntegerLiteral> ')'
                 | OBJECT_ID '(' StringLiteral ')'
                 | OBJECT_ID '(' StringLiteral ',' StringLiteral ')'
                 | CURRENT_TIMESTAMP
                 | CURRENT_USER
                 | SESSION_USER
                 | SYSTEM_USER
                 | USER
                 | <NamedFunction>

<NamedFunction> ::= <FunctionName> '(' ')'
                  | <FunctionName> '(' <ExpressionList> ')'

<NamedFunctionList> ::= <NamedFunction> '.' <NamedFunctionList>
                      | <NamedFunction>

<Value> ::= <SystemVariableName>
          | <ColumnNameQualified>
          | <VariableName> ! CLR UDT property, field are not yet implemented
!          | <VariableName> '.' <ObjectName>
          | <VariableName> '.' <NamedFunctionList>
          | <ExpressionParens>
          | <ExpressionParens> '.' <NamedFunctionList>
          | <FunctionCall>
          | <FunctionCall> '.' <NamedFunctionList>
          | <TableName> '.' <NamedFunctionList> ! should be <SchemaName> '.' <NamedFunctionList> - but that gives a reduce-reduce error
          | <TableName> '.' <ColumnName> '.' <NamedFunctionList> ! for functions such as .query() 
          | <FunctionCall> OVER '(' <RankingArguments> ')'

<ExpressionParens> ::= '(' <SelectQuery> ')'
                     | '(' <Expression> ')'
